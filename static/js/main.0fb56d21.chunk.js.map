{"version":3,"sources":["Counter.js","AddCounterForm.js","ConfirmationDelete.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","counter","increment","decrement","purify","className","scope","colSpan","id","name","onClick","count","AddCounterForm","useState","setName","setCount","type","value","onChange","e","target","onSubmit","ConfirmationDelete","isDisabledDeleteConfirmationButton","setIsDisabledDeleteConfirmationButton","Modal","isOpen","toggle","onCancel","ModalHeader","ModalBody","Form","FormGroup","Input","inputText","trim","toLowerCase","ModalFooter","Button","color","onSuccess","disabled","App","counters","setCounters","confirmCounter","setConfirmCounter","incrementCounter","console","log","index","findIndex","el","newCounters","decrementCounter","map","confirmRemoveCounter","reduce","a","c","key","Math","ceil","random","Number","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fb56d21.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Counter(props) {\n    const {counter, increment, decrement, purify} = props;\n    return (\n        <table className='.table-borderless'>\n            <thead>\n            <tr>\n                <th scope=\"col\">\n                    <th scope=\"row\">\n                        <th scope=\"row\">\n                            <th scope=\"col\">\n                                <td colSpan=\"3\">\n                                    <strong className='col-sm'> {counter.id} </strong>\n                                    <strong className='col-sm'> {counter.name} </strong>\n                                    <button onClick={() => decrement(counter.id)}\n                                            className='btn btn-primary row-cols-1'>-\n                                    </button>\n                                    <strong className='col-sm'> {counter.count} </strong>\n                                    <button onClick={() => increment(counter.id)}\n                                            className='btn btn-primary btn-group mr-2'>+\n                                    </button>\n                                    <button onClick={() => purify(counter)}\n                                            className='btn btn-danger btn-secondary'>Purify\n                                    </button>\n                                </td>\n                            </th>\n                        </th>\n                    </th>\n                </th>\n            </tr>\n            </thead>\n        </table>\n    );\n}\n\n\nexport default Counter;\n\n\n","import React, {useState} from 'react';\nimport './App.css'\n\nfunction AddCounterForm(props) {\n    const [name, setName] = useState('Enter name');\n    const [count, setCount] = useState('Enter value');\n    const onSubmit = () => {\n        props.onSubmit(name, count);\n        setName('');\n        setCount('');\n    };\n\n    return (\n\n        <div className='form form-group'>\n            <h3> Add new counter </h3>\n            <div className='row-cols-6'>\n                <div className=\"row-cols-1\">\n                    <input type='text' name='name' value={name} onChange={e => setName(e.target.value)}\n                           className='form-control card text-center alert alert-secondary'/>\n                </div>\n                <div className=\"row-cols-1\">\n                    <input type='text' name='count' value={count} onChange={e => setCount(e.target.value)}\n                           className='form-control card text-center alert alert-secondary'/>\n                </div>\n                <button onClick={() => onSubmit(name, count)}\n                        className='btn btn-success'>Add counter\n                </button>\n            </div>\n        </div>\n\n    );\n}\n\nexport default AddCounterForm;\n","import React, {useState} from \"react\";\nimport {Button, Form, FormGroup, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\n\nexport default function ConfirmationDelete(props) {\n\n    const modalConfirmationUserInputChange = (e) => {\n        const inputText = e.target.value;\n        setIsDisabledDeleteConfirmationButton(inputText.trim().toLowerCase() !== props.name.trim().toLowerCase());\n    };\n    const [isDisabledDeleteConfirmationButton, setIsDisabledDeleteConfirmationButton] = useState(true);\n\n    const deleteButtonClick = () => {\n        setIsDisabledDeleteConfirmationButton(true);\n        props.onSuccess();\n    };\n\n    const cancelButtonClick = () => {\n        setIsDisabledDeleteConfirmationButton(true);\n        props.onCancel();\n    };\n    return (\n        <Modal isOpen={props.name} toggle={props.onCancel}>\n            <ModalHeader>Delete confirmation</ModalHeader>\n            <ModalBody>\n                <p>\n                    Enter counter name <strong>{props.name} </strong>to delete it\n                </p>\n                <Form>\n                    <FormGroup>\n                        <Input\n                            type=\"email\"\n                            name=\"email\"\n                            id=\"exampleEmail\"\n                            onChange={modalConfirmationUserInputChange}\n                        />\n                    </FormGroup>\n                </Form>\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"danger\"\n                        onClick={deleteButtonClick}\n                        disabled={isDisabledDeleteConfirmationButton}>Delete\n                </Button>{' '}\n                <Button\n                    color=\"secondary\"\n                    onClick={cancelButtonClick}>Cancel\n                </Button>\n            </ModalFooter>\n        </Modal>\n    )\n}","import React, {useState} from 'react';\nimport Counter from \"./Counter\";\nimport AddCounterForm from \"./AddCounterForm\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ConfirmationDelete from \"./ConfirmationDelete\";\n\n\nfunction App() {\n    const InitialCountersState = [\n        {id: 1, name: 'Counter 1', count: 2},\n        {id: 2, name: 'Counter 2', count: 5},\n        {id: 3, name: 'Counter 3', count: 8},\n        {id: 4, name: 'Counter 4', count: 9},\n    ];\n\n    const [counters, setCounters] = useState(InitialCountersState);\n    const [confirmCounter, setConfirmCounter] = useState({});\n\n    const resetTotalCount = () => {\n        const newCounters = counters.map(el => ({...el, count: 0}));\n        setCounters(newCounters);\n    };\n\n    const incrementCounter = (id) => {\n        console.log('INC ' + id);\n        const index = counters.findIndex(el => el.id === id);\n        const newCounters = [...counters];\n        newCounters[index].count = counters[index].count + 1;\n        setCounters(newCounters);\n    };\n\n    const decrementCounter = (id) => {\n        console.log('DECR ' + id);\n        const newCounters = counters.map(el => {\n            if (el.id === id) return {...el, count: el.count - 1};\n            return el;\n        });\n        setCounters(newCounters);\n    };\n\n    const confirmRemoveCounter = counter => {\n        setConfirmCounter(counter);\n\n    };\n\n    const removeConfirm = id => {\n        const newCounters = counters.filter(el => el.id !== confirmCounter.id);\n        setCounters(newCounters);\n        setConfirmCounter({})\n    };\n\n    const confirmDeleteCancel = () => {\n        setConfirmCounter({});\n    };\n\n    const addCounter = (name, count) => {\n        const newCounters = [...counters, {\n            id: Math.ceil(Math.random()) * 10,\n            name,\n            count: Number(count)\n        }];\n        setCounters(newCounters);\n    };\n\n    return (\n        <div className='container'>\n            <h1 className=''>Total: {counters.reduce((a, c) => a + c.count, 0)}</h1>\n            <hr/>\n            <h2 className='page-header'>Counters</h2>\n            <button onClick={resetTotalCount} className='btn btn-primary'>Reset total count</button>\n            <hr/>\n            {\n                counters.map(el => <Counter key={el.id}\n                                            counter={el}\n                                            increment={incrementCounter}\n                                            decrement={decrementCounter}\n                                            purify={confirmRemoveCounter}\n                />)\n            }\n            <hr/>\n            <AddCounterForm onSubmit={addCounter}/>\n            <ConfirmationDelete\n                name={confirmCounter.name}\n                onSuccess={removeConfirm}\n                onCancel={confirmDeleteCancel}\n            />\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}